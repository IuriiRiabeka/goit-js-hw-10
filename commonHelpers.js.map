{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('[data-start]');\nconst daysTime = document.querySelector('[data-days]');\nconst hoursTime = document.querySelector('[data-hours]');\nconst minutesTime = document.querySelector('[data-minutes]');\nconst secondsTime = document.querySelector('[data-seconds]');\nconst input = document.querySelector('#datetime-picker');\n\nlet timeDifference;\nlet intervalId;\nlet timerStarted = false;\n\n\nconst options = {\n  defaultDate: null,\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n\n  onClose(selectedDates) {\n    const userDate = new Date(selectedDates[0]).getTime();\n    const startDate = Date.now();\n\n    if (userDate >= startDate) {\n      startBtn.disabled = false;\n      timeDifference = userDate - startDate;\n      updateClockface(convertMs(timeDifference));\n\n      if (timerStarted) {\n        resetTimer();\n      }\n    } else {\n      iziToast.error({\n        fontSize: 'large',\n        close: false,\n        position: 'topRight',\n        messageColor: 'white',\n        timeout: 2000,\n        backgroundColor: 'red',\n        message: 'Please choose a date in the future'\n      });\n    }\n  }\n};\n\nflatpickr('#datetime-picker', options);\n\nstartBtn.addEventListener('click', () => {\n  if (!timerStarted) {\n    const currentDate = Date.now(); // Current time in milliseconds since January 1, 1970\n    const selectedDate = new Date(input.value).getTime(); // Selected date by the user in milliseconds since January 1, 1970\n    timeDifference = selectedDate - currentDate; // Difference between the selected date and the current time\n    if (timeDifference > 0) { // Check to ensure the timer does not count negative time\n\n      startBtn.disabled = true;\n      input.disabled = true;\n      startTimer();\n    } else {\n      iziToast.error({\n        fontSize: 'large',\n        close: false,\n        position: 'topRight',\n        messageColor: 'white',\n        timeout: 2000,\n        backgroundColor: 'red',\n        message: 'Please choose a date in the future'\n      });\n    }\n  } else {\n    location.reload(); // Перезавантаження сторінки, коли таймер активний\n  }\n});\n\n\nfunction resetTimer() {\n  clearInterval(intervalId);\n  updateClockface({ days: '00', hours: '00', minutes: '00', seconds: '00' });\n  timerStarted = false;\n}\n\nfunction startTimer() {\n  if (!timerStarted) {\n    clearInterval(intervalId);\n    intervalId = setInterval(timer, 1000);\n    timerStarted = true;\n  }\n}\n\nfunction timer() {\n  if (timeDifference > 1000) {\n\n    timeDifference -= 1000;\n    updateClockface(convertMs(timeDifference));\n  } else {\n    clearInterval(intervalId);\n    input.disabled = false;\n    timerStarted = false;\n  }\n}\n\nfunction updateClockface({ days, hours, minutes, seconds }) {\n  daysTime.textContent = `${days}`;\n  hoursTime.textContent = `${hours}`;\n  minutesTime.textContent = `${minutes}`;\n  secondsTime.textContent = `${seconds}`;\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(time) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = addLeadingZero(Math.floor(time / day));\n  const hours = addLeadingZero(Math.floor((time % day) / hour));\n  const minutes = addLeadingZero(Math.floor(((time % day) % hour) / minute));\n  const seconds = addLeadingZero(Math.floor((((time % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}\n\n"],"names":["startBtn","daysTime","hoursTime","minutesTime","secondsTime","input","timeDifference","intervalId","timerStarted","options","selectedDates","userDate","startDate","updateClockface","convertMs","resetTimer","iziToast","flatpickr","currentDate","startTimer","timer","days","hours","minutes","seconds","addLeadingZero","value","time"],"mappings":"2GAKA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAQ,SAAS,cAAc,kBAAkB,EAEvD,IAAIC,EACAC,EACAC,EAAe,GAGnB,MAAMC,EAAU,CACd,YAAa,KACb,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACrB,MAAMC,EAAW,IAAI,KAAKD,EAAc,CAAC,CAAC,EAAE,UACtCE,EAAY,KAAK,MAEnBD,GAAYC,GACdZ,EAAS,SAAW,GACpBM,EAAiBK,EAAWC,EAC5BC,EAAgBC,EAAUR,CAAc,CAAC,EAErCE,GACFO,KAGFC,EAAS,MAAM,CACb,SAAU,QACV,MAAO,GACP,SAAU,WACV,aAAc,QACd,QAAS,IACT,gBAAiB,MACjB,QAAS,oCACjB,CAAO,CAEJ,CACH,EAEAC,EAAU,mBAAoBR,CAAO,EAErCT,EAAS,iBAAiB,QAAS,IAAM,CACvC,GAAKQ,EAqBH,SAAS,OAAM,MArBE,CACjB,MAAMU,EAAc,KAAK,MAEzBZ,EADqB,IAAI,KAAKD,EAAM,KAAK,EAAE,UACXa,EAC5BZ,EAAiB,GAEnBN,EAAS,SAAW,GACpBK,EAAM,SAAW,GACjBc,KAEAH,EAAS,MAAM,CACb,SAAU,QACV,MAAO,GACP,SAAU,WACV,aAAc,QACd,QAAS,IACT,gBAAiB,MACjB,QAAS,oCACjB,CAAO,CAEP,CAGA,CAAC,EAGD,SAASD,GAAa,CACpB,cAAcR,CAAU,EACxBM,EAAgB,CAAE,KAAM,KAAM,MAAO,KAAM,QAAS,KAAM,QAAS,IAAI,CAAE,EACzEL,EAAe,EACjB,CAEA,SAASW,GAAa,CACfX,IACH,cAAcD,CAAU,EACxBA,EAAa,YAAYa,EAAO,GAAI,EACpCZ,EAAe,GAEnB,CAEA,SAASY,GAAQ,CACXd,EAAiB,KAEnBA,GAAkB,IAClBO,EAAgBC,EAAUR,CAAc,CAAC,IAEzC,cAAcC,CAAU,EACxBF,EAAM,SAAW,GACjBG,EAAe,GAEnB,CAEA,SAASK,EAAgB,CAAE,KAAAQ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1DvB,EAAS,YAAc,GAAGoB,CAAI,GAC9BnB,EAAU,YAAc,GAAGoB,CAAK,GAChCnB,EAAY,YAAc,GAAGoB,CAAO,GACpCnB,EAAY,YAAc,GAAGoB,CAAO,EACtC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASZ,EAAUa,EAAM,CAMvB,MAAMN,EAAOI,EAAe,KAAK,MAAME,EAAO,KAAG,CAAC,EAC5CL,EAAQG,EAAe,KAAK,MAAOE,EAAO,MAAO,IAAI,CAAC,EACtDJ,EAAUE,EAAe,KAAK,MAAQE,EAAO,MAAO,KAAQ,GAAM,CAAC,EACnEH,EAAUC,EAAe,KAAK,MAASE,EAAO,MAAO,KAAQ,IAAU,GAAM,CAAC,EAEpF,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}